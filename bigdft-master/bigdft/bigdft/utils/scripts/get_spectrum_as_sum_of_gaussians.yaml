exc_en_and_osc_str: [Excitation Energy and Oscillator Strength]
eval: |
  import numpy as np

  ###Test what is stored in exc_en_and_osc_str:
  ##print type(exc_en_and_osc_str), exc_en_and_osc_str, type(exc_en_and_osc_str[0]), exc_en_and_osc_str[0]
  ##print type(exc_en_and_osc_str[0][0]), exc_en_and_osc_str[0][0], type(exc_en_and_osc_str[0][1]), exc_en_and_osc_str[0][1]

  #store excitations energies and oscillator strengths in different lists
  exc_en = [exc_en_and_osc_str[i_en][0] for i_en in range(len(exc_en_and_osc_str))]
  osc_str = [exc_en_and_osc_str[i_osc][1] for i_osc in range(len(exc_en_and_osc_str))]
  ##print exc_en,'\n', osc_str

  #Define values for the spectrum
  e_min = 1.05 * min(exc_en)              #minimal eneregy
  e_max = 1.05 * max(exc_en)              #maximal energy
  npts = 2500                             #number of points
  sigma = 0.1 #100.0 / npts * (e_max - e_min)  #width of the peak ()
  print 'e_min=', e_min, '; e_max=', e_max, '; npts=', npts, '; sigma=', sigma #data to be printed

  #Define the energy range of the output data
  en = np.arange( e_min, e_max, (e_max-e_min)/npts )
  #print(en)

  #Define the spectrum
  spectrum = [] #initialise 
  for e_i in en:
    spectrum.append(   np.sum(  osc_str * np.exp( - (e_i - exc_en[:])**2 / (2 * sigma**2) )  )   ) #Append data corresponding to each energy grid
  ##print spectrum
   
  #print the useful data: 
  #- energy on the first column (stored in 'en') 
  #- intensity of the spectrum in a second column (stored in 'spectrum')
  myspectrumfile_e = open('spectrum.dat', 'w') #open the file
  for i_e in range(npts): #loop over the energy grid to write data into the file
    #print ' %.16e   % .16e' % ( en[i_e], spectrum[i_e] )
    myspectrumfile_e.write(  ' %.16e   % .16e \n' % ( en[i_e], spectrum[i_e] ) )
  ##  print ' %.16e   % .16e \n' % ( en[i_e], spectrum[i_e] )
